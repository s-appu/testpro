package test.xml.operations;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;

public class Stylizer {
    static Document document;

    public static void main( final String[] argv ) {
        if ( argv.length != 2 ) {
            System.err.println( "Usage: java Stylizer stylesheet xmlfile" );
            System.exit( 1 );
        }

        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

        try {
            final File stylesheet = new File( argv[0] );
            final File datafile = new File( argv[1] );

            final DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.parse( datafile );

            // Use a Transformer for output
            // final TransformerFactory tFactory = TransformerFactory.newInstance();
            final TransformerFactory tFactory = new net.sf.saxon.TransformerFactoryImpl();
            final StreamSource stylesource = new StreamSource( stylesheet );
            final Transformer transformer = tFactory.newTransformer( stylesource );

            final DOMSource source = new DOMSource( document );
            final StreamResult result = new StreamResult( System.out );
            transformer.transform( source, result );
        } catch ( final TransformerConfigurationException tce ) {
            // Error generated by the parser
            System.out.println( "\n** Transformer Factory error" );
            System.out.println( "   " + tce.getMessage() );

            // Use the contained exception, if any
            Throwable x = tce;

            if ( tce.getException() != null ) {
                x = tce.getException();
            }

            x.printStackTrace();
        } catch ( final TransformerException te ) {
            // Error generated by the parser
            System.out.println( "\n** Transformation error" );
            System.out.println( "   " + te.getMessage() );

            // Use the contained exception, if any
            Throwable x = te;

            if ( te.getException() != null ) {
                x = te.getException();
            }

            x.printStackTrace();
        } catch ( final SAXException sxe ) {
            // Error generated by this application
            // (or a parser-initialization error)
            Exception x = sxe;

            if ( sxe.getException() != null ) {
                x = sxe.getException();
            }

            x.printStackTrace();
        } catch ( final ParserConfigurationException pce ) {
            // Parser with specified options can't be built
            pce.printStackTrace();
        } catch ( final IOException ioe ) {
            // I/O error
            ioe.printStackTrace();
        }
    } // main
}
